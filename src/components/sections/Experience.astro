---
import Section from '../Section.astro'
import { work } from '@cv'
import { Icon } from 'astro-icon/components'

interface ProjectItem {
  name: string;
  url?: string;
  description?: string;
  items?: ProjectItem[];
}

const millisecondsInYear = 1000 * 60 * 60 * 24 * 365
const millisecondsInMonth = 1000 * 60 * 60 * 24 * 30
---

<Section className={Astro.props.className} title="Experience">
  <ul class="flex flex-col">
    {work.map(({ name, startDate, endDate, position, summary, highlights, projects_and_contributions, responsibilities, achievements, url, skills, location, location_type }) => {
      const start = new Date(startDate)
      const end = endDate ? new Date(endDate) : new Date()
      const startYear = start.getFullYear()
      const endYear = endDate != null ? new Date(endDate).getFullYear() : "Present"
      
      // Calculate total months between dates
      const months = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth())
      const years = Math.floor(months / 12)
      const remainingMonths = months % 12

      // Format duration string
      const workedTime = years > 0 
        ? `${years}y ${remainingMonths}m`
        : `${remainingMonths}m`
      const workedDatetime = years > 0 
        ? `P${years}Y${remainingMonths}M`
        : `P${remainingMonths}M`

      return (
        <li class="group relative flex flex-col gap-2 py-6 print:py-2">
          <div class="flex items-baseline">
            <svg
              xmlns='http://www.w3.org/2000/svg'
              width='24'
              height='24'
              viewBox='0 0 24 24'
              fill='none'
              stroke='currentColor'
              stroke-width='2'
              stroke-linecap='round'
              stroke-linejoin='round'
              class='mr-2 hidden h-5 w-5 self-start md:inline-block print:hidden text-skin-hue'>
              <path d='M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z' />
              <path d='M22 10v6' />
              <path d='M6 12.5V16a6 3 0 0 0 12 0v-3.5' />
            </svg>
            <div class="flex flex-col">
              <div class="flex items-center gap-2">
                <h3 class="text-lg font-semibold">
                  {url ? (
                    <a href={url} target="_blank" rel="noopener noreferrer" class="hover:text-skin-hue">
                      {name}
                    </a>
                  ) : (
                    name
                  )}
                </h3>
                <span class="text-sm text-skin-muted">{position}</span>
              </div>
              <div class="flex items-center gap-2 text-sm text-skin-muted">
                <span>{location}</span>
                <span>•</span>
                <span>{location_type}</span>
                <span>•</span>
                <span>{startYear} - {endYear}</span>
                <span>•</span>
                <span title={workedDatetime}>{workedTime}</span>
              </div>
            </div>
          </div>

          <p class="text-skin-muted">{summary}</p>

          {highlights && (
            <div class="flex flex-col gap-1">
              <h4 data-ccursor="lift">Highlights:</h4>
              <ul class="text-skin-muted [&>li]:ml-4 flex list-disc flex-col gap-2">
                {highlights.map(highlight => (
                  <li data-ccursor>{highlight}</li>
                ))}
              </ul>
            </div>
          )}

          {projects_and_contributions && (
            <div class="flex flex-col gap-1">
              <h4 data-ccursor="lift">Projects & Contributions:</h4>
              <ul class="text-skin-muted [&>li]:ml-4 flex list-disc flex-col gap-2">
                {projects_and_contributions.map((project) => (
                  <div>
                    <h4 class="font-medium">{project.name}</h4>
                    {project.description && <p class="text-skin-muted">{project.description}</p>}
                    {project.url && (
                      <a href={project.url} target="_blank" rel="noopener noreferrer" class="text-skin-accent hover:text-skin-accent-hover">
                        View Project
                      </a>
                    )}
                    {project.items && (
                      <ul class="list-disc list-inside space-y-1 mt-2">
                        {project.items.map((item: ProjectItem) => (
                          <li>
                            {item.url ? (
                              <a href={item.url} target="_blank" rel="noopener noreferrer" class="hover:text-skin-hue">
                                {item.name}
                              </a>
                            ) : (
                              <span>{item.name}</span>
                            )}
                            {item.description && <span class="text-skin-muted"> - {item.description}</span>}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                ))}
              </ul>
            </div>
          )}

          <div class="expand-container relative flex flex-col print:!h-auto gap-4 print:gap-2 after:bg-gradient-to-t after:absolute after:bottom-0 after:w-full print:after:hidden after:h-12 after:content-[''] h-16 group-data-[expanded=true]:after:hidden group-data-[expanded=true]:h-auto overflow-hidden duration-200 ease-out">
            {responsibilities && (
              <div class="flex flex-col gap-1">
                <h4 data-ccursor="lift">Responsibilities:</h4>
                <ul class="text-skin-muted [&>li]:ml-4 flex list-disc flex-col gap-2">
                  {responsibilities.map(responsibility => (
                    <li data-ccursor>{responsibility}</li>
                  ))}
                </ul>
              </div>
            )}

            {achievements && (
              <div class="flex flex-col gap-1">
                <h4 data-ccursor="lift">Achievements:</h4>
                <ul class="text-skin-muted [&>li]:ml-4 flex list-disc flex-col gap-2">
                  {achievements.map(achievement => (
                    <li data-ccursor>{achievement}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          <button data-ccursor="lift" class="print:hidden group/more w-fit cursor-pointer items-center justify-center gap-1.5 text-xs underline text-skin-muted transition-all hover:text-skin-inverted flex expand-button">
            <span class="expand-text">Show more</span>
            <Icon name="ri:arrow-up-s-line" class="w-4 h-4 group-hover/more:translate-y-0.5 duration-200 ease-out group-data-[expanded=true]:rotate-180" width={24} height={24}></Icon>
          </button>

          <ul class="flex print:hidden flex-wrap gap-2" aria-label="Technologies used">
            {skills && Object.entries(skills).map(([label, icon]) => (
              <li data-ccursor="lift" class="bg-skin-button-accent/20 border-skin-hue/20 text-skin-hue print:p-0 print:bg-transparent print:text-zinc-800 flex gap-1 items-center border-solid print:border-none border rounded-md px-2 py-0.5 text-xs backdrop-blur-sm select-none">
                {icon && <Icon name={icon} width={16} height={16} />} <span>{label}</span>
              </li>
            ))}
          </ul>
        </li>
      )
    })}
  </ul>
</Section>

<script>
  document.querySelectorAll('.expand-button').forEach(button => {
    button.addEventListener('click', () => {
      const container = button.closest('li')?.querySelector('.expand-container');
      if (container) {
        const isExpanded = container.getAttribute('data-expanded') === 'true';
        container.setAttribute('data-expanded', (!isExpanded).toString());
        const expandText = button.querySelector('.expand-text');
        if (expandText) {
          expandText.textContent = isExpanded ? 'Show more' : 'Show less';
        }
      }
    });
  });
</script>

<style>
  li::marker {
    @apply text-skin-hue;
  }
  h4 {
    @apply max-w-min px-2 sm:hover:text-skin-hue;
  }
  .expand-container[data-expanded="true"] {
    height: auto;
  }
  .expand-container[data-expanded="false"] {
    height: 4rem;
  }
</style>
